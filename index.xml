<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>127.0.0.1</title>
    <link>http://127001.me/</link>
    <description>Recent content on 127.0.0.1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Aug 2016 21:00:00 +0100</lastBuildDate>
    <atom:link href="http://127001.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Turning Synology NAS into a geeky media server: PulseAudio</title>
      <link>http://127001.me/post/synology/mediaserver-p2/</link>
      <pubDate>Tue, 16 Aug 2016 21:00:00 +0100</pubDate>
      
      <guid>http://127001.me/post/synology/mediaserver-p2/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;http://127001.me/post/synology/mediaserver-p1&#34;&gt;previous post&lt;/a&gt; on the topic has been revised recently. You might want to look
through it again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Required files can be downloaded from &lt;a href=&#34;https://github.com/edio/synology-mediaserver&#34;&gt;https://github.com/edio/synology-mediaserver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Previously we&amp;rsquo;ve covered ALSA setup and Debian chroot.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll describe how to set up PulseAudio in Debian chroot, so that it&amp;rsquo;s possible to stream any sound from
linux-powered pc to a sound card connected to Synology NAS.&lt;/p&gt;

&lt;h2 id=&#34;installing-pulseaudio&#34;&gt;Installing PulseAudio&lt;/h2&gt;

&lt;p&gt;Although Synology already uses PulseAudio for sound playback in Synology AudioStation, an old version of PulseAudio is
used for that purpose (2.1 as per DSM5.1). Debian chroot, on the other hand, provides PulseAudio 5.0.&lt;/p&gt;

&lt;p&gt;Install PulseAudio and some dependencies and add &lt;code&gt;pulse&lt;/code&gt; user to &lt;code&gt;audio&lt;/code&gt; group&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# apt-get install pulseaudio pulseaudio-module-zeroconf dbus
(chroot)# gpasswd -a pulse audio
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pulseaudio-theory&#34;&gt;PulseAudio theory&lt;/h3&gt;

&lt;h4 id=&#34;modes-of-operation&#34;&gt;Modes of operation&lt;/h4&gt;

&lt;p&gt;PulseAudio can operate in 2 modes: system mode and per-user mode.&lt;/p&gt;

&lt;p&gt;Configuration file for per-user mode is &lt;code&gt;/etc/pulse/default.pa&lt;/code&gt;. If PulseAudio works in system mode, it reads from
&lt;code&gt;/etc/pulse/system.pa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although system mode worked pretty well for me, it is considered unsafe and
&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/User/WhatIsWrongWithSystemWide/&#34;&gt;is said&lt;/a&gt; to have
bad performance.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll describe modifications I made to configuration script. They may be applied to both &lt;code&gt;default.pa&lt;/code&gt; and &lt;code&gt;system.pa&lt;/code&gt;
with the same effect.&lt;/p&gt;

&lt;h4 id=&#34;working-with-remote-clients&#34;&gt;Working with remote clients&lt;/h4&gt;

&lt;p&gt;When it comes to playing audio from remote clients, PulseAudio provides 2 options:
&lt;a href=&#34;https://en.wikipedia.org/wiki/Real-time_Transport_Protocol&#34;&gt;RTP&lt;/a&gt; and native TCP protocol.&lt;/p&gt;

&lt;p&gt;In case of RTP, client broadcasts a signal and capable receivers on network receive it. RTP is extensively used and is
widely supported by applications, so theoretically not only PulseAudio clients can play, but any RTP sender that
can send &lt;em&gt;uncompressed&lt;/em&gt; (RTP provides plenty of options, but PulseAudio doesn&amp;rsquo;t support all) audio.&lt;/p&gt;

&lt;p&gt;RTP can be easily enabled or disabled with &lt;code&gt;paprefs&lt;/code&gt; utility without even changing configuration.&lt;/p&gt;

&lt;p&gt;I noticed 2 downsides of RTP:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It gives noticeable delay when streaming from PC. Though it may be compensated manually in &lt;code&gt;pavucontrol&lt;/code&gt; utility.&lt;/li&gt;
&lt;li&gt;PulseAudio server died frequently for me when acted as RTP receiver.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Native TCP, on the other hand, is for PulseAudio clients only. It is as if PulseAudio client had been talking to a local
PulseAudio server, only it is not local. Thus, no extensive support, no 3-rd party apps playing&amp;hellip;&lt;/p&gt;

&lt;p&gt;Also there&amp;rsquo;s 1 thing to keep in mind: native TCP is extremely sensitive to time synchronisation. Client and server must
be almost perfectly in sync. To the extent, that even having different NTP servers on the client and server breaks
playback completely.&lt;/p&gt;

&lt;p&gt;As a benefit you&amp;rsquo;ll get perfectly synced audio and video when playing movies or youtube videos on your PC.&lt;/p&gt;

&lt;p&gt;Also PulseAudio seems to support it much better and works without crashes for me.&lt;/p&gt;

&lt;h3 id=&#34;pulseaudio-server-configuration&#34;&gt;PulseAudio server configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# vi /etc/pulse/default.pa
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Devices auto-detection via udev never worked for me, no matter, how I tried, so I loaded audio drivers statically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load-module module-alsa-card device_id=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and removed auto-detection completely by removing &lt;code&gt;module-udev-detect&lt;/code&gt; and &lt;code&gt;module-detect&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anyone on group &lt;code&gt;audio&lt;/code&gt; should be able to use PulseAudio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load-module module-native-protocol-unix auth-group=audio
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anyone on local network (192.168.0.1 through 192.168.0.255 in my case) should be able to use PulseAudio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1;192.168.0.0/24;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PulseAudio should be discoverable via zeroconf, so clients are not required to specify static IP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load-module module-zeroconf-publish
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it. Also I cleaned up some modules I do not need, for example the one that corks audio, when phone stream is
active, the one that displays information about playing application or pans notification sound depending on widget
position on the screen (whoa, PulseAudio is a beast, really), bluetooth, etc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Load audio drivers statically
load-module module-alsa-card device_id=0

### Allow access for everyone in audio group
load-module module-native-protocol-unix auth-group=audio

### Allow access for everyone on local network
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1;192.168.0.0/24;
load-module module-zeroconf-publish

### Load the RTP receiver module (can be configured via paprefs)
#load-module module-rtp-recv

### Load the RTP sender module (can be configured via paprefs)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties=&amp;quot;device.description=&#39;RTP Multicast Sink&#39;&amp;quot;
#load-module module-rtp-send source=rtp.monitor

load-module module-default-device-restore
load-module module-rescue-streams
load-module module-always-sink
load-module module-intended-roles
load-module module-suspend-on-idle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not need network streaming, remove  &lt;code&gt;module-zeroconf-publish&lt;/code&gt;. It might be a good idea to keep
&lt;code&gt;module-native-protocol-tcp&lt;/code&gt; though, as it&amp;rsquo;ll let you to connect to PulseAudio from remote PC with &lt;code&gt;pavucontrol&lt;/code&gt; and
&lt;code&gt;paprefs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(pc)$ PULSE_SERVER=&amp;lt;nas ip&amp;gt; pavucontrol
(pc)$ PULSE_SERVER=&amp;lt;nas ip&amp;gt; paprefs
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;clients-on-the-nas&#34;&gt;Clients on the NAS&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# vi /etc/pulse/client.pa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need all local applications to try to connect to local PulseAudio server only. Also I turned &lt;code&gt;auto-spawn&lt;/code&gt; off as I
intend to start PulseAudio manually from &lt;code&gt;pulse&lt;/code&gt; user&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default-server = 127.0.0.1
autospawn = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;giving-it-a-spin&#34;&gt;Giving it a spin&lt;/h3&gt;

&lt;p&gt;Start all the systems PulseAudio depends on&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# service start dbus
(chroot)# service start avahi-daemon
(chroot)# su pulse -s /bin/bash -c &#39;pulseaudio -D&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it doesn&amp;rsquo;t start, try examining its output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# su pulse -s /bin/bash
(chroot)$ pulseaudio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Else, if it starts successfully, try playing some sound through it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# aplay -D pulse /media/path/to/some.wav
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Volume can be adjusted with alsamixer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# alsamixer
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-ntp&#34;&gt;Configure NTP&lt;/h2&gt;

&lt;p&gt;As I mentioned streaming via native TCP protocol won&amp;rsquo;t work if system clocks on NAS and your PC are our of sync.
DSM6.0 has ntp installed, and by default it uses Google servers for time synchronization:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)$ ntpq -p
     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
*time1.google.co 71.79.79.71      2 u  768 1024  377  126.551    1.670   1.470
+time2.google.co 71.79.79.71      2 u  684 1024  377  135.111    0.921   0.836
+time3.google.co 71.79.79.71      2 u  449 1024  377   31.924    0.433   1.520
+time4.google.co 71.79.79.71      2 u  561 1024  377  292.364    5.348   4.849
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I just added the same servers to &lt;code&gt;/etc/ntp.conf&lt;/code&gt; on my pc and never had a problem with playback again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(pc)# cat /etc/ntp.conf | grep server
server time1.google.com minpoll 6 maxpoll 10 iburst prefer
server time2.google.com minpoll 6 maxpoll 10 iburst prefer
server time3.google.com minpoll 6 maxpoll 10 iburst prefer
server time4.google.com minpoll 6 maxpoll 10 iburst prefer
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pulseaudio-client-configuration&#34;&gt;PulseAudio client configuration&lt;/h2&gt;

&lt;p&gt;Just load &lt;code&gt;module-zeroconf-discover&lt;/code&gt; in your &lt;code&gt;/etc/pulse/default.pa&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(pc)# vi /etc/pulse/default.pa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uncomment or add line and restart PulseAudio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load-module module-zeroconf-discover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After PulseAudio restart new tunnel sink should become available in PulseAudio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(pc)$ pacmd list-sinks
  ...
    index: 2
        name: &amp;lt;tunnel.sigma.local.alsa_output.0.analog-stereo&amp;gt;
        driver: &amp;lt;module-tunnel.c&amp;gt;
        flags: NETWORK HW_MUTE_CTRL HW_VOLUME_CTRL LATENCY 
        state: IDLE
        suspend cause: 
        priority: 0
        volume: front-left: 42185 /  64%,   front-right: 42185 /  64%
                balance 0.00
        base volume: 65536 / 100%
        volume steps: 65537
        muted: no
        current latency: 312.65 ms
        max request: 0 KiB
        max rewind: 0 KiB
        monitor source: 3
        sample spec: s16le 2ch 44100Hz
        channel map: front-left,front-right
                     Stereo
        used by: 0
        linked by: 2
        fixed latency: 250.00 ms
        module: 24
        properties:
                device.description = &amp;quot;Audinst HUD-mini Analog Stereo on pulse@sigma&amp;quot;
                tunnel.remote.server = &amp;quot;[2a02:a310:20:5f80:211:32ff:fe3d:74f5]:4713&amp;quot;
                tunnel.remote.sink = &amp;quot;alsa_output.0.analog-stereo&amp;quot;
                device.icon_name = &amp;quot;audio-card&amp;quot;
                tunnel.remote_version = &amp;quot;29&amp;quot;
                tunnel.remote.user = &amp;quot;pulse&amp;quot;
                tunnel.remote.fqdn = &amp;quot;sigma&amp;quot;
                tunnel.remote.description = &amp;quot;Audinst HUD-mini Analog Stereo&amp;quot;
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s hot it looks in PulseAudio Volume Control utility&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://127001.me/post/synology/screenshot1.png&#34; alt=&#34;pavucontrol&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;starting-pulseaudio-on-nas-automatically&#34;&gt;Starting PulseAudio on NAS automatically&lt;/h2&gt;

&lt;p&gt;We need to create startup scripts to run &lt;code&gt;dbus&lt;/code&gt;, &lt;code&gt;avahi-daemon&lt;/code&gt; and &lt;code&gt;pulseaudio&lt;/code&gt; itself. The approach was described in
the &lt;a href=&#34;http://127001.me/post/synology/mediaserver-p1&#34;&gt;previous part&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just refer to the &lt;a href=&#34;https://github.com/edio/synology-mediaserver/tree/master/nas/usr/local/etc/rc.d&#34;&gt;git repo&lt;/a&gt; for
details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overloading that is not permitted or Java bridge methods</title>
      <link>http://127001.me/post/java-bridge-methods/</link>
      <pubDate>Mon, 09 May 2016 00:59:08 +0200</pubDate>
      
      <guid>http://127001.me/post/java-bridge-methods/</guid>
      <description>

&lt;p&gt;Most of my technical interviews for Java developer position include a puzzle, where candidate should implement 2 very
similar interfaces in a single class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Implement both interfaces in a single class if possible. Explain why possible/not possible.

interface WithPrimitiveInt {
  void m(int i);
}

interface WithInteger {
  void m(Integer i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes candidates, not being sure about the right answer, are willing to solve the following puzzle instead (I give
it to candidates later anyway):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface S {
  String m(int i);
}

interface V {
  void m(int i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indeed, the latter puzzle appears to be much easier, and most of the candidates answer, that implementation of both
methods in a signle class shouldn&amp;rsquo;t be possible, because the signatures of &lt;code&gt;S.m(int)&lt;/code&gt; and &lt;code&gt;V.m(int)&lt;/code&gt; are the same while
return types are different. And this is absolutely correct.&lt;/p&gt;

&lt;p&gt;Sometimes, though, I ask another question on the topic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you think, it would make any sense to allow implementation of methods with the same method signature but different
return types in a single class? Maybe, in some hypothetical JVM-based language or at least on a JVM level?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s kind of an open question and I do not expect a single correct answer here. But although I do not expect one, the
correct answer exists. And a person, who worked with the reflections API a lot, performed bytecode manipulations or read
JVM specification might know it.&lt;/p&gt;

&lt;h2 id=&#34;java-method-signature-vs-jvm-method-descriptor&#34;&gt;Java method signature vs JVM method descriptor&lt;/h2&gt;

&lt;p&gt;Java method signature (i.e. method name and types of parameters) is only imposed by Java compiler during compilation.
JVM, on the other hand, distinguishes methods in a class by a combination of the
&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.2.2&#34;&gt;unqualified method name&lt;/a&gt; (simply the name of
the method) and the
&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.3.3&#34;&gt;method descriptor&lt;/a&gt;, that is a list of
parameter descriptors and one return descriptor.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to invoke a method &lt;code&gt;String m(int i)&lt;/code&gt; directly on a class &lt;code&gt;foo.Bar&lt;/code&gt;, in the bytecode we&amp;rsquo;d need
to have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INVOKEVIRTUAL foo/Bar.m (I)Ljava/lang/String;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and for &lt;code&gt;void m(int i)&lt;/code&gt; it would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INVOKEVIRTUAL foo/Bar.m (I)V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, JVM is perfectly fine with &lt;code&gt;String m(int i)&lt;/code&gt; and &lt;code&gt;void m(int i)&lt;/code&gt; in a single class. All we need to do, is to
generate proper bytecode.&lt;/p&gt;

&lt;h2 id=&#34;bytecode-kung-fu&#34;&gt;Bytecode Kung Fu&lt;/h2&gt;

&lt;p&gt;We have interfaces &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;, let&amp;rsquo;s generate now a class &lt;code&gt;SV&lt;/code&gt; which implements both those interfaces. Representation
in Java, if it was allowed, should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SV implements S, V {
  public void m(int i) {
    System.out.println(&amp;quot;void m(int i)&amp;quot;);
  }
  public String m(int i) {
    System.out.println(&amp;quot;String m(int i)&amp;quot;);
    return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate bytecode we&amp;rsquo;ll use &lt;a href=&#34;http://asm.ow2.org/index.html&#34;&gt;Objectweb ASM library&lt;/a&gt;, which is low-level enough to get
a feeling of what JVM bytecode is.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/edio/java-bridge-methods&#34;&gt;Full source code&lt;/a&gt; is shared on github, here I&amp;rsquo;ll only list and explain
essential snippets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);

// package edio.java.experiments
// public class SV implements S, V
cw.visit(V1_7, ACC_PUBLIC, &amp;quot;edio/java/experiments/SV&amp;quot;, null, &amp;quot;java/lang/Object&amp;quot;, new String[]{
    &amp;quot;edio/java/experiments/S&amp;quot;,
    &amp;quot;edio/java/experiments/V&amp;quot;
});

// constructor
MethodVisitor constructor = cw.visitMethod(ACC_PUBLIC, &amp;quot;&amp;lt;init&amp;gt;&amp;quot;, &amp;quot;()V&amp;quot;, null, null);
constructor.visitCode();
constructor.visitVarInsn(Opcodes.ALOAD, 0);
constructor.visitMethodInsn(Opcodes.INVOKESPECIAL, &amp;quot;java/lang/Object&amp;quot;, &amp;quot;&amp;lt;init&amp;gt;&amp;quot;, &amp;quot;()V&amp;quot;);
constructor.visitInsn(Opcodes.RETURN);
constructor.visitMaxs(1, 1);
constructor.visitEnd();

// public String m(int i)
MethodVisitor mString = cw.visitMethod(ACC_PUBLIC, &amp;quot;m&amp;quot;, &amp;quot;(I)Ljava/lang/String;&amp;quot;, null, null);
mString.visitCode();
mString.visitFieldInsn(Opcodes.GETSTATIC, &amp;quot;java/lang/System&amp;quot;, &amp;quot;out&amp;quot;, &amp;quot;Ljava/io/PrintStream;&amp;quot;);
mString.visitLdcInsn(&amp;quot;String&amp;quot;);
mString.visitMethodInsn(Opcodes.INVOKEVIRTUAL, &amp;quot;java/io/PrintStream&amp;quot;, &amp;quot;println&amp;quot;, &amp;quot;(Ljava/lang/String;)V&amp;quot;);
mString.visitInsn(Opcodes.ACONST_NULL);
mString.visitInsn(Opcodes.ARETURN);
mString.visitMaxs(2, 2);
mString.visitEnd();

// public void m(int i)
MethodVisitor mVoid = cw.visitMethod(ACC_PUBLIC, &amp;quot;m&amp;quot;, &amp;quot;(I)V&amp;quot;, null, null);
mVoid.visitFieldInsn(Opcodes.GETSTATIC, &amp;quot;java/lang/System&amp;quot;, &amp;quot;out&amp;quot;, &amp;quot;Ljava/io/PrintStream;&amp;quot;);
mVoid.visitLdcInsn(&amp;quot;void&amp;quot;);
mVoid.visitMethodInsn(Opcodes.INVOKEVIRTUAL, &amp;quot;java/io/PrintStream&amp;quot;, &amp;quot;println&amp;quot;, &amp;quot;(Ljava/lang/String;)V&amp;quot;);
mVoid.visitInsn(Opcodes.RETURN);
mVoid.visitMaxs(2, 2);
mVoid.visitEnd();

cw.visitEnd();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start with creating &lt;code&gt;ClassWriter&lt;/code&gt; to generate bytecode.&lt;/p&gt;

&lt;p&gt;Then we declare a class, that implements interfaces &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although, our reference pseudo-java code for &lt;code&gt;SV&lt;/code&gt; didn&amp;rsquo;t contain any constructors, we must generate code for it anyway,
if we do not declare constructors in Java, compiler implicitly generates empty constructor for us.&lt;/p&gt;

&lt;p&gt;In the methods bodies we start by obtaining the &lt;code&gt;out&lt;/code&gt; field of type &lt;code&gt;java.io.PrintStream&lt;/code&gt; from &lt;code&gt;System&lt;/code&gt; class and
pushing it onto the operand stack. Then we load a constant (&lt;code&gt;&amp;quot;String&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;void&amp;quot;&lt;/code&gt;) onto the stack and invoke &lt;code&gt;println&lt;/code&gt;
on an obtained &lt;code&gt;out&lt;/code&gt; reference with the string constant as an argument.&lt;/p&gt;

&lt;p&gt;Finally, for &lt;code&gt;String m(int i)&lt;/code&gt; we push a constant of type reference with value &lt;code&gt;null&lt;/code&gt; to stack and use a correspondingly
typed &lt;code&gt;return&lt;/code&gt; instruction, &lt;code&gt;ARETURN&lt;/code&gt; it is, to return a value back to a method caller. For the &lt;code&gt;void m(int i)&lt;/code&gt; we use
untyped &lt;code&gt;RETURN&lt;/code&gt; to only jump back to a method caller without returning a value.&lt;/p&gt;

&lt;p&gt;To verify, that our bytecode is correct (and I&amp;rsquo;ve been doing this all the time, iteratively fixing the issues), we write
the generated class to a filesystem&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Files.write(new File(&amp;quot;/tmp/SV.class&amp;quot;).toPath(), cw.toByteArray());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use &lt;code&gt;jad&lt;/code&gt; (java decompiler) to turn bytecode back to java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jad -p /tmp/SV.class
The class file version is 51.0 (only 45.3, 46.0 and 47.0 are supported)
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package edio.java.experiments;

import java.io.PrintStream;

// Referenced classes of package edio.java.experiments:
//            S, V

public class SV
    implements S, V
{

    public SV()
    {
    }

    public String m(int i)
    {
        System.out.println(&amp;quot;String&amp;quot;);
        return null;
    }

    public void m(int i)
    {
        System.out.println(&amp;quot;void&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close enough, I think.&lt;/p&gt;

&lt;h2 id=&#34;using-generated-class-in-runtime&#34;&gt;Using generated class in runtime&lt;/h2&gt;

&lt;p&gt;Successful decompilation by &lt;code&gt;jad&lt;/code&gt; actually guarantees us nothing. &lt;code&gt;jad&lt;/code&gt; warns us if there are major problems with the
bytecode, like frame size to local variables discrepancy or missing return statement. But in general we can&amp;rsquo;t be sure
that our generated class will do any job in runtime.&lt;/p&gt;

&lt;p&gt;To use generated class in runtime we need to load it somehow into JVM and then instantiate.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s implement our own &lt;code&gt;AsmClassLoader&lt;/code&gt;. It is just a convenient wrapper around &lt;code&gt;ClassLoader.defineClass&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AsmClassLoader extends ClassLoader {
  public Class defineAsmClass(String name, ClassWriter classWriter) {
    byte[] bytes = classWriter.toByteArray();
    return defineClass(name, bytes, 0, bytes.length);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s use that classloader and instantiate the class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClassWriter cw = SVGenerator.generateClass();
AsmClassLoader classLoader = new AsmClassLoader();
Class&amp;lt;?&amp;gt; generatedClazz = classLoader.defineAsmClass(SVGenerator.SV_FQCN, cw);
Object o = generatedClazz.newInstance();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since our class is generated in runtime, we can&amp;rsquo;t cast to it in our source code. We can cast to the implemented
interfaces though. And non-reflective invocation becomes possible with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;((S)o).m(1);
((V)o).m(1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we execute the code, the output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String
void
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To some the output might seem unexpected: we call &lt;em&gt;the same&lt;/em&gt; (from Java&amp;rsquo;s perspective) method on a class, but results
differ depending on the interface we cast object to. Mind-blowing, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;Things become clearer, if we think about the underlying bytecode. For the invocation we performed, compiler generates
&lt;code&gt;INVOKEINTERFACE&lt;/code&gt; instruction and the method descriptor comes not from the class, but from the interface.&lt;/p&gt;

&lt;p&gt;Thus, for the first invocation we&amp;rsquo;ll have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INVOKEINTERFACE edio/java/experiments/S.m (I)Ljava/lang/String;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and for the second one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INVOKEINTERFACE edio/java/experiments/V.m (I)V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object, on which invocation is performed, is obtained from the stack. And that is the power behind polymorphism in
Java.&lt;/p&gt;

&lt;h2 id=&#34;bridge-method-is-the-name&#34;&gt;Bridge method is the name&lt;/h2&gt;

&lt;p&gt;One might ask: “So what is the point of that all? Will you ever use that kind of stuff in your code?”&lt;/p&gt;

&lt;p&gt;The thing is that we do use this virtually every time we write usual Java code. For example, covariant return types,
generics and access to private fields from inner classes are implemented using similar “magic” in bytecode.&lt;/p&gt;

&lt;p&gt;Consider an interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface ZeroProvider {
  Number getZero();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and its implementation returning a covariant type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class IntegerZero implements ZeroProvider {
  public Integer getZero() {
    return 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s now think about the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IntegerZero iz = new IntegerZero();
iz.getZero();

ZeroProvider zp = iz;
zp.getZero();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;iz.getZero()&lt;/code&gt; call compiler will generate &lt;code&gt;INVOKEVIRTUAL&lt;/code&gt; with &lt;code&gt;()Ljava/lang/Integer;&lt;/code&gt; method descriptor, while
for the &lt;code&gt;zp.getZero()&lt;/code&gt; it will generate &lt;code&gt;INVOKEINTERFACE&lt;/code&gt; with &lt;code&gt;()Ljava/lang/Number;&lt;/code&gt; method descriptor. We already
know, that JVM dispatches a call on the object by a method name and a method descriptor. Since descriptors are
different, those 2 calls can&amp;rsquo;t be dispatched to the same method in our &lt;code&gt;IntegerZero&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;In fact, compiler generates one additional method, which acts as a &lt;em&gt;bridge&lt;/em&gt; between the real method we declared in the
class, and the method used during invocation via interface. Hence the name — &lt;strong&gt;bridge method&lt;/strong&gt;. If only Java permitted
this, the resulting code would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class IntegerZero implements ZeroProvider {
  public Integer getZero() {
    return 0;
  }

  // This is a synthetic bridge method, which is present only in bytecode.
  // Java compiler wouldn&#39;t permit it.
  public Number getZero() {
    return this.getZero();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;afterword&#34;&gt;Afterword&lt;/h2&gt;

&lt;p&gt;Java programming language and Java Virtual Machine are not to be confused: although they share one common word in their
names and although Java is the main language for JVM, their possibilities and limitations are not always the same.
Knowing JVM helps a lot understanding Java or any other JVM-based language and knowing Java and its history, on the
other hand, helps understanding certain decisions in JVM design.&lt;/p&gt;

&lt;h2 id=&#34;related-links&#34;&gt;Related links&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se7/html/&#34;&gt;Java Virtual Machine Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.forge.objectweb.org/asm/asm4-guide.pdf&#34;&gt;ASM user guide [pdf]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/edio/java-bridge-methods&#34;&gt;Source code from the article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/921025/eclipse-warning-about-synthetic-accessor-for-private-static-nested-classes-in-jav&#34;&gt;Synthetic accessor for private nested classes in Java [StackOverflow]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Turning Synology NAS into a geeky media server</title>
      <link>http://127001.me/post/synology/mediaserver-p1/</link>
      <pubDate>Wed, 06 Jan 2016 01:51:40 +0100</pubDate>
      
      <guid>http://127001.me/post/synology/mediaserver-p1/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This post was revised and updated on Aug 16, 2016&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Required files can be downloaded from &lt;a href=&#34;https://github.com/edio/synology-mediaserver&#34;&gt;https://github.com/edio/synology-mediaserver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m not a huge fan of Synology. I bought my DS214 by friend&amp;rsquo;s recommendation and became frustrated with it right after
the purchase. Bundled software was limited and buggy. Many people find Synology products great. But for me it just
didn&amp;rsquo;t work well because it forced its use cases on me instead of being a helpful tool for my own very specific use
cases.&lt;/p&gt;

&lt;p&gt;Anyway, I wasn&amp;rsquo;t willing to lose money on reselling my NAS, so I decided to get as much as possible from it and
currently with my DS214Play I can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Play virtually any sound via connected USB sound card.&lt;/li&gt;
&lt;li&gt;Particularly, I can play my huge collection of high-resolution music in various formats (with replaygain tags
respected). All that thanks to &lt;em&gt;mpd&lt;/em&gt;, which I can control from any decent phone, web-browser or even smart-watch and
scrobble all statistics to Last.fm.&lt;/li&gt;
&lt;li&gt;Stream sound from my laptop via &lt;em&gt;PulseAudio&lt;/em&gt;, while watching videos on YouTube or movies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this and few next posts I&amp;rsquo;m going to tell, what I have done to get all this.&lt;/p&gt;

&lt;p&gt;Although everything here have been tried on DS214Play it should also work on any other x86-based (or theoretically, even
on ARM-based) Synology product.&lt;/p&gt;

&lt;p&gt;I do not expect anything bad, but, just in case, standard disclaimer: &lt;strong&gt;everything described here may contain mistakes
and inaccuracies, cause data loss or even damage to your hardware.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;notations&#34;&gt;Notations&lt;/h1&gt;

&lt;p&gt;The code you need to execute in a terminal will be presented in code blocks, &lt;code&gt;$&lt;/code&gt; prompt means, that code is to be
executed from an unprivileged user, &lt;code&gt;#&lt;/code&gt; means that code must be executed from root. Environment will be given in braces
before the prompt. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Execute on NAS from an unprivileged user&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)$ date
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute as root in chroot&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# date
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;setup-debian-chroot&#34;&gt;Setup Debian chroot&lt;/h1&gt;

&lt;p&gt;We start with &lt;a href=&#34;https://synocommunity.com/package/debian-chroot&#34;&gt;Debian chroot&lt;/a&gt; setup because it will help us a lot
during testing and it&amp;rsquo;ll be required for PulseAudio to work later.&lt;/p&gt;

&lt;p&gt;Debian repositories contain thousands of applications, and unlike optware solutions all packages are relatively fresh
and usually work without issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add SynoCommunity repo following &lt;a href=&#34;https://synocommunity.com/#easy-install&#34;&gt;official guide&lt;/a&gt;. Do not forget to set
Trust level to &lt;em&gt;Synology Inc. and trusted publishers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://synocommunity.com/package/debian-chroot&#34;&gt;Debian Chroot&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;Start this package from &lt;em&gt;Package Center&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;configure-debian-chroot&#34;&gt;Configure Debian chroot&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SSH to NAS and &lt;code&gt;su&lt;/code&gt; to &lt;em&gt;root&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)$ sudo -s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Chroot to Debian&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# /var/packages/debian-chroot/scripts/start-stop-status chroot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update package index and install locales to remove pesky warning about missing locales&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# apt-get update
(chroot)# apt-get install locales-all
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install alsa utils as we&amp;rsquo;ll require them later&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# apt-get install alsa-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exit form chroot (or create another SSH session)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# exit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;share-media-files-to-debian-chroot&#34;&gt;Share media files to Debian chroot&lt;/h2&gt;

&lt;p&gt;By default Debian chroot won&amp;rsquo;t get access to files stored on NAS (that&amp;rsquo;s the idea of chroot). We have to mount
explicitly those directories, we want to expose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# mount -o bind /path/to/dir/on/nas /var/packages/debian-chroot/target/var/chroottarget/path/to/dir/in/chroot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a script under &lt;code&gt;/usr/local/etc/rc.d/&lt;/code&gt; to do that mounting automatically on startup. The script must be named
&lt;code&gt;S[00-99]whatever.sh&lt;/code&gt; to be picked up by DSM init framework, where &lt;code&gt;[00-99]&lt;/code&gt; determines order of execution. Mine is
named &lt;code&gt;S90chrootmount.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

. /etc.defaults/rc.subr

CHROOTDIR=/var/packages/debian-chroot/target/var/chroottarget/media
MEDIADIR=/volume1/media

case $1 in
        start)
                mount -o bind $MEDIADIR $CHROOTDIR
        ;;
        stop)
                umount $CHROOTDIR
        ;;
        restart)
                $0 stop
                sleep 1
                $0 start
        ;;
        *)
                echo &amp;quot;Usage: $0 start|stop|restart&amp;quot;
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To expose directory to chroot then, do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# /usr/local/etc/rc.d/S90chrootmount.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing that, we can chroot to Debian again and check that mount worked as expected (&lt;code&gt;/media&lt;/code&gt; in chroot should
corresponds to &lt;code&gt;/volume1/media&lt;/code&gt; on NAS for my case).&lt;/p&gt;

&lt;h1 id=&#34;setup-sound-card&#34;&gt;Setup sound card&lt;/h1&gt;

&lt;p&gt;Obviously, sound card should be supported in Linux. I own &lt;em&gt;Audinst USB HUD mini&lt;/em&gt; and it&amp;rsquo;s a real plug-n-play. I just
plug it in, and if alsa is set up, it just works. For what it&amp;rsquo;s worth, I&amp;rsquo;m satisfied with the device, it sounds not as
good as my beloved ESI Juli@, but still it is good for its price.&lt;/p&gt;

&lt;h2 id=&#34;loading-kernel-modules&#34;&gt;Loading kernel modules&lt;/h2&gt;

&lt;p&gt;For sound card to work we need to install required kernel modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

. /etc.defaults/rc.subr

KERNELMODULE=&amp;quot;soundcore snd-page-alloc snd snd-seq-device snd-rawmidi snd-usbmidi-lib snd-usb-lib snd-hwdep snd-timer snd-pcm snd-usb-audio snd-mixer-oss snd-pcm-oss&amp;quot;
COMPATMODULE=&amp;quot;snd-usb-hiface&amp;quot;

case $1 in
        start)
                SYNOLoadModules $KERNELMODULE
                SYNOLoadModules $COMPATMODULE
        ;;
        stop)
                SYNOUnloadModules $COMPATMODULE
                SYNOUnloadModules $KERNELMODULE
        ;;
        restart)
                $0 stop
                sleep 1
                $0 start
        ;;
        *)
                echo &amp;quot;Usage: $0 start|stop|restart&amp;quot;
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load exactly the modules, that are loaded by &lt;em&gt;AudioStation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To do that automatically on NAS startup I saved the script as &lt;code&gt;/usr/local/etc/rc.d/S01audiod.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Load modules without reboot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# /usr/local/etc/rc.d/S01audiod.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;verify-it-works&#34;&gt;Verify it works&lt;/h2&gt;

&lt;p&gt;Chroot to Debian chroot and test it with &lt;code&gt;aplay&lt;/code&gt;. You&amp;rsquo;ll need some &lt;code&gt;*.wav&lt;/code&gt; file in your media files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# /var/packages/debian-chroot/scripts/start-stop-status chroot
(chroot)# aplay /media/path/to/some.wav
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it doesn&amp;rsquo;t work right ahead, examine output of &lt;code&gt;aplay -L&lt;/code&gt;, maybe you need to choose a different device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(chroot)# aplay -L
(chroot)# aplay -D front /media/path/to/some.wav
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fixing-permissions-issue&#34;&gt;Fixing permissions issue&lt;/h2&gt;

&lt;p&gt;By default sound device is initialized to be accessible only by root user. An easy temporary fix would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# chmod a+rw /dev/dsp*
(nas)# chmod -R a+rw /dev/snd/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then, if device is replugged, you have to do that again. To fix that permanently we need an udev rule to set mode
each time device is connected.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;/usr/lib/udev/rules.d/50-sound.rules&lt;/code&gt; with the following content&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SUBSYSTEM==&amp;quot;sound&amp;quot;, MODE=&amp;quot;0666&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reload udev rules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# udevadm control --reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reconnect sound card or use reload kernel modules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(nas)# /usr/local/etc/rc.d/S01audiod.sh restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see that newly created devices have &lt;code&gt;rw&lt;/code&gt; mode for all users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l /dev/dsp*
crw-rw-rw- 1 root root 14, 67 Aug 15 16:44 /dev/dsp4

$ ls -l /dev/snd/*
crw-rw-rw- 1 root root 116,  0 Aug 15 16:44 /dev/snd/controlC0
crw-rw-rw- 1 root root 116, 16 Aug 15 17:38 /dev/snd/pcmC0D0p
crw-rw-rw- 1 root root 116, 17 Aug 15 16:44 /dev/snd/pcmC0D1p
crw-rw-rw- 1 root root 116, 33 Aug 15 16:44 /dev/snd/timer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every user in &lt;code&gt;audio&lt;/code&gt; group in Debian chroot will have access to audio device.&lt;/p&gt;

&lt;p&gt;Basically that&amp;rsquo;s it. For more experienced users it shouldn&amp;rsquo;t be hard to setup mpd on Debian to play via ALSA.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in sound streaming over network with PulseAudio, please check out the
&lt;a href=&#34;http://127001.me/post/synology/mediaserver-p2&#34;&gt;next part&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>randrctl — profile-based screen manager for X</title>
      <link>http://127001.me/post/introducing-randrctl/</link>
      <pubDate>Wed, 17 Sep 2014 18:45:22 +0300</pubDate>
      
      <guid>http://127001.me/post/introducing-randrctl/</guid>
      <description>

&lt;p&gt;While having some free time, decided to automate one of my daily routines — setting up external display.&lt;/p&gt;

&lt;p&gt;Idea appeared long before I was told about famous (or not?) &lt;a href=&#34;https://github.com/wertarbyte/autorandr&#34;&gt;autorandr&lt;/a&gt; project.
So if you are familiar with autorandr, you are already familiar with randrctl idea.&lt;/p&gt;

&lt;h1 id=&#34;idea&#34;&gt;Idea&lt;/h1&gt;

&lt;p&gt;How often have you to plug external display to your laptop, how many different setups do you have? I have 3: no external display, office setup, where laptop stands below old 19&amp;rdquo; external display and home setup, where laptop stands beside of my shiny 23&amp;rdquo; fullhd display. To set them all up, I created 3 scripts in my home directory: &lt;code&gt;lvds.sh&lt;/code&gt;, &lt;code&gt;office.sh&lt;/code&gt;, &lt;code&gt;home.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That couldn&amp;rsquo;t be good. So I decided to develop an utility to manage my screen setup in the same way &lt;a href=&#34;https://wiki.archlinux.org/index.php/Netctl&#34;&gt;networks are managed in archlinux&lt;/a&gt;. So instead of calling custom shell script, it would be possible to do something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ randrctl switch-to office
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;randrctl&#34;&gt;randrctl&lt;/h1&gt;

&lt;p&gt;And here it is: &lt;a href=&#34;https://github.com/edio/randrctl&#34;&gt;randrctl on github&lt;/a&gt; (tah-dam!). Project has a descriptive readme (I believe), but here is a brief list of what is done already&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support for display mode (resolution), position, rotation and panning (the latter is not supported in autorandr afaik)&lt;/li&gt;
&lt;li&gt;switching between profiles&lt;/li&gt;
&lt;li&gt;executing custom commands before and after the switch or in the case randrctl fails&lt;/li&gt;
&lt;li&gt;profile creation from current screen setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under the hood it performs calls to &lt;code&gt;xrandr&lt;/code&gt; utility to get info about current setup and to apply new settings.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Installation instructions are on &lt;a href=&#34;https://github.com/edio/randrctl&#34;&gt;github&lt;/a&gt;. Basic idea is that you clone a git repo and allow python to install the module. And then you copy exemplary configs to specific locations and copy completion functions for bash and zsh if you need them.&lt;/p&gt;

&lt;p&gt;For archers there is a &lt;a href=&#34;https://aur.archlinux.org/packages/randrctl-git&#34;&gt;package on AUR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;All configuration is currently stored under &lt;code&gt;/etc/randrctl/&lt;/code&gt; (which may be not such a good idea, because screen setup usually do not require root privileges, I know. I&amp;rsquo;m working on it).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/randrctl/config.ini&lt;/code&gt; allows to declare custom commands on profile switch or failure. The whole property value gets executed in a shell, so all these &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;s, &lt;code&gt;||&lt;/code&gt;s, pipes and redirections are supported. While composing your custom commands, you can get profile name from &lt;code&gt;$randr_profile&lt;/code&gt; environment variable. Error, if it happens, is stored to &lt;code&gt;$randr_error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Profiles are stored under &lt;code&gt;/etc/randrctl/profiles/&lt;/code&gt; as plain text files in json format. Profile structure and property names are self-descriptive, I believe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;outputs&amp;quot;: {
        &amp;quot;LVDS1&amp;quot;: {
            &amp;quot;mode&amp;quot;: &amp;quot;1366x768&amp;quot;,
            &amp;quot;panning&amp;quot;: &amp;quot;1366x1080&amp;quot;
        },
        &amp;quot;DP1&amp;quot;: {
            &amp;quot;mode&amp;quot;: &amp;quot;1920x1080&amp;quot;,
            &amp;quot;pos&amp;quot;: &amp;quot;1366x0&amp;quot;.
            &amp;quot;rotate&amp;quot;: &amp;quot;inverted&amp;quot;
        }
    },
    &amp;quot;primary&amp;quot;: &amp;quot;DP1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;randrctl&lt;/code&gt; without parameters (or with canonical &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;) will tell you all you can do with it. And you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;check your current screen setup&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ randrctl show&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dump it to file (note that root is required here)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# randrctl dump my_setup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;check stored profiles&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ randrctl show my_setup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;list your profiles&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ randrctl list&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;and finally, apply profile settings&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ randrctl switch-to my_setup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;planned-features&#34;&gt;Planned features&lt;/h2&gt;

&lt;p&gt;Right now I&amp;rsquo;m thinking about 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;autodetecting when display is plugged via udev and applying profile, that matches display EDID (I come with this idea before knowing about autorandr, I swear ;))&lt;/li&gt;
&lt;li&gt;support for user profiles and configurations. This will allow to run randrctl without root&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course there is always a room for code and experience improvements, so these will take place also.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Java logging frameworks determine caller class and method name</title>
      <link>http://127001.me/post/java-logging-caller-class-and-method/</link>
      <pubDate>Tue, 08 Apr 2014 23:54:49 +0200</pubDate>
      
      <guid>http://127001.me/post/java-logging-caller-class-and-method/</guid>
      <description>

&lt;p&gt;This post describes how java logging frameworks (Log4j, for example) know a point (concrete class and method name), where logging statement has been invoked.&lt;/p&gt;

&lt;p&gt;I decided to write this post, because quite often I communicate with developers, who do not understant what is the cost of writing caller information to logs, and why such high cost is imposed.&lt;/p&gt;

&lt;h1 id=&#34;brief-log4j-configuration-and-usage-overview&#34;&gt;Brief Log4J configuration and usage overview&lt;/h1&gt;

&lt;p&gt;Logger is identified by its name (a.k.a. category). Common myth here, is that logger is somehow connected with the class it is declared in. The myth is based on the signature of the factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static final Logger log = LogManager.getLogger(MyService.class);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but that&amp;rsquo;s just a shortcut for&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;LogManager.getLogger(MyService.class.getName());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;category-vs-caller-class-name&#34;&gt;Category vs Caller class name&lt;/h2&gt;

&lt;p&gt;It is important to understand the difference between logger category (placeholder &lt;code&gt;%c&lt;/code&gt; in &lt;a href=&#34;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html&#34;&gt;&lt;em&gt;PatternLayout&lt;/em&gt;&lt;/a&gt;) and caller class name (&lt;code&gt;%C&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Consider the following example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.my.company.name;
public class MyService {

  private static final Logger log1 = LogManager.getLogger(MyService.class);
  private static final Logger log2 = LogManager.getLogger(&amp;quot;blah-blah&amp;quot;);

  public void f() {
    log1.debug(&amp;quot;I&#39;m log1&amp;quot;);
    log2.debug(&amp;quot;I&#39;m log2&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When call to &lt;em&gt;f()&lt;/em&gt; is performed while logger is configured with pattern &lt;code&gt;%c - %m%n&lt;/code&gt;, log will contain&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;com.my.company.name.MyService - I&#39;m log1
blah-blah - I&#39;m log2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the other hand, if pattern is &lt;code&gt;%C - %m%n&lt;/code&gt;, we&amp;rsquo;ll get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;com.my.company.name.MyService - I&#39;m log1
com.my.company.name.MyService - I&#39;m log2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite of being named &lt;em&gt;blah-blah&lt;/em&gt;, the second logger somehow determined its caller class name.&lt;/p&gt;

&lt;h1 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;Before JVM enters any method, it records the point from which this method is invoked to be able to return to that same point later, after the method returns. Let&amp;rsquo;s look at simple example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Example {
  public static void main(String[] args) { a(); }
  static void a() { getCallerInfo(); }
  static void getCallerInfo() { b(); }
  static void b() { throw new RuntimeException(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Method &lt;em&gt;b()&lt;/em&gt; throws an exception. Exception reaches the very top without being caught and its stacktrace gets printed to &lt;em&gt;System.err&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException
 at Example.b(Example.java:7)
 at Example.getCallerInfo(Example.java:6)
 at Example.a(Example.java:5)
 at Example.main(Example.java:4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having that stacktrace it is easy to say, that method &lt;em&gt;getCallerInfo()&lt;/em&gt; has been called from method &lt;em&gt;a()&lt;/em&gt;. So if we could get that stacktrace in runtime somehow and analyze it, we could find an invocation point for any method in our application.&lt;/p&gt;

&lt;h2 id=&#34;obtaining-stacktrace&#34;&gt;Obtaining stacktrace&lt;/h2&gt;

&lt;p&gt;There are few ways to get stacktrace in Java: &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#getStackTrace--&#34;&gt;&lt;em&gt;Thread.getStackTrace()&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#getStackTrace--&#34;&gt;&lt;em&gt;Throwable.getStackTrace()&lt;/em&gt;&lt;/a&gt;. Both methods return array of &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/StackTraceElement.html&#34;&gt;&lt;em&gt;StackTraceElement&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;throwable-getstacktrace&#34;&gt;Throwable.getStackTrace()&lt;/h4&gt;

&lt;p&gt;Usage is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;new Throwable().getStackTrace();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stacktrace gets filled in when &lt;em&gt;Throwable&lt;/em&gt; is created, so no need to throw it. Moreover, it is possible to reuse the same &lt;em&gt;Throwable&lt;/em&gt; instance calling &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#fillInStackTrace--&#34;&gt;&lt;em&gt;fillInStacktrace()&lt;/em&gt;&lt;/a&gt; to refresh stacktrace when needed (of course, keeping in mind possible race conditions if shared across threads).
Under the hood native method &lt;em&gt;Throwable.fillInStackTrace(int dummy)&lt;/em&gt; is invoked eventually.&lt;/p&gt;

&lt;h4 id=&#34;thread-getstacktrace&#34;&gt;Thread.getStackTrace()&lt;/h4&gt;

&lt;p&gt;Usage is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Thread.currentThread().getStackTrace();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although a bit cleaner, this method does not give other benefits and is a bit slower (it has to check, whether stack trace is obtained for current thread of for some other thread, doing necessary security checks if required). And in the end stacktrace is obtained from new &lt;em&gt;Exception&lt;/em&gt; instance in a way described above.&lt;/p&gt;

&lt;h2 id=&#34;parsing-stacktrace&#34;&gt;Parsing stacktrace&lt;/h2&gt;

&lt;p&gt;So we got array of &lt;em&gt;StackTraceElement&lt;/em&gt;. We need to iterate through that array and find such element whichs declaring class and method name properties satisfy some criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;quot;debug&amp;quot;.equals(methodName) &amp;amp; &amp;quot;my.company.Logger&amp;quot;.equals(declaringClass)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is very simple straightforward implementation of a logger, which knows everything about its caller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Logger {

  /**
   * Log message to stderr along with the caller class and method name.
   * @param msg message to log
   */
  public final void log(String msg) {
    StackTraceElement[] stackTrace = new Throwable().getStackTrace();
    // Index of StackTraceElement in stacktrace, where our logger appears.
    int i = getSelfElementIndex(stackTrace, this.getClass());
    // Caller is the next item down the stack.
    StackTraceElement caller = stackTrace[i + 1];
    System.err.println(caller.getClassName() + &amp;quot;.&amp;quot; + caller.getMethodName() + &amp;quot;: &amp;quot;
       + msg);
  }

  private int getSelfElementIndex(StackTraceElement[] stackTrace) {
    for (int i = 0; i &amp;lt; stackTrace.length; i++) {
      StackTraceElement el = stackTrace[i];
      // We don&#39;t need to check method name, our logger has only one method.
      if (el.getClassName().equals(this.getClass().getName())) {
        return i;
      }
    }
    throw new IllegalStateException(&amp;quot;Logger doesn&#39;t appear in stacktrace&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;what-about-log4j&#34;&gt;What about log4j&lt;/h1&gt;

&lt;p&gt;Of course, it&amp;rsquo;s a bit more complicated than that. Good points to start investigation are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.log4j.spi.LocationInfo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.log4j.helpers.PatternParser.LocationPatternConverter&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Listen tracks from youtube in mpd</title>
      <link>http://127001.me/post/youtube-in-mpd/</link>
      <pubDate>Fri, 13 Sep 2013 14:18:07 +0300</pubDate>
      
      <guid>http://127001.me/post/youtube-in-mpd/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ll need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mpd with &lt;code&gt;curl&lt;/code&gt; support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rg3.github.io/youtube-dl/&#34;&gt;youtube-dl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suppose, you want to listen to some &lt;a href=&#34;http://www.youtube.com/watch?v=HS5fHWmzqIg&#34;&gt;vocal trance&lt;/a&gt; on youtube.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;youtube-dl&lt;/code&gt; to determine what formats are available&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ youtube-dl -f http://www.youtube.com/watch?v=HS5fHWmzqIg
[youtube] Setting language
[youtube] HS5fHWmzqIg: Downloading video webpage
[youtube] HS5fHWmzqIg: Downloading video info webpage
[youtube] HS5fHWmzqIg: Extracting video information
Available formats:
22      :       mp4     [720x1280]
18      :       mp4     [360x640]
43      :       webm    [360x640]
5       :       flv     [240x400]
36      :       3gp     [240x320]
17      :       3gp     [144x176]
136     :       mp4     [720p] (DASH Video)
135     :       mp4     [480p] (DASH Video)
134     :       mp4     [360p] (DASH Video)
133     :       mp4     [240p] (DASH Video)
160     :       mp4     [192p] (DASH Video)
141     :       m4a     [256k] (DASH Audio)
172     :       webm    [256k] (DASH Audio)
140     :       m4a     [128k] (DASH Audio)
171     :       webm    [128k] (DASH Audio)
139     :       m4a     [48k] (DASH Audio)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 5 audio formats for this video. &lt;strong&gt;141&lt;/strong&gt;&lt;sup&gt;th&lt;/sup&gt; has highest bitrate. So all we have to do, is to get real URL for this format and feed it to mpd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mpc add `youtube-dl -f141 -g http://www.youtube.com/watch?v=HS5fHWmzqIg`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all, track from youtube is already in your mpd playlist. Enjoy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>